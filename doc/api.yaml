openapi: 3.0.0
paths:
  /user:
    post:
      operationId: UsersController_create
      summary: Create new user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDto"
      responses:
        "201":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Request body does not contains required fields
      tags: &a1
        - user
    get:
      operationId: UsersController_findAll
      summary: Get all users
      parameters: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
      tags: *a1
  "/user/{id}":
    get:
      operationId: UsersController_findOne
      summary: Get one user with specific Id
      parameters:
        - name: id
          required: true
          in: path
          description: User identifier
          schema:
            format: uuid
            type: string
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: UserId is not uuid
        "404":
          description: User was not found
      tags: *a1
    put:
      operationId: UsersController_update
      summary: Update a user with specified Id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserDto"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: UserId is not uuid
        "403":
          description: Old password is wrong
        "404":
          description: User was not found
      tags: *a1
    delete:
      operationId: UsersController_remove
      summary: Delete a user with specific Id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "204":
          description: User removed
        "400":
          description: UserId is not uuid
        "404":
          description: User was not found
      tags: *a1
  /artist:
    post:
      operationId: ArtistsController_create
      summary: Create new artist
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateArtistDto"
      responses:
        "201":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Artist"
        "400":
          description: Request body does not contains required fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorType"
      tags: &a2
        - artist
    get:
      operationId: ArtistsController_findAll
      summary: Get all artists
      parameters: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Artist"
      tags: *a2
  "/artist/{id}":
    get:
      operationId: ArtistsController_findOne
      summary: Get one artist with specific Id
      parameters:
        - name: id
          required: true
          in: path
          description: Artist identifier
          schema:
            format: uuid
            type: string
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Artist"
        "400":
          description: ArtistId is not uuid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorType"
        "404":
          description: Artist was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorType"
      tags: *a2
    put:
      operationId: ArtistsController_update
      summary: Update a artist with specified Id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateArtistDto"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Artist"
        "400":
          description: ArtistId is not uuid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorType"
        "404":
          description: Artist was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorType"
      tags: *a2
    delete:
      operationId: ArtistsController_remove
      summary: Delete a artist with specific Id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "204":
          description: Artist removed
        "400":
          description: ArtistId is not uuid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorType"
        "404":
          description: Artist was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorType"
      tags: *a2
  /favs:
    get:
      operationId: FavsController_findAll
      summary: Get all favorites by one user
      parameters: []
      responses:
        "200":
          description: Successful added to favorites
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Fav"
      tags: &a3
        - favs
  "/favs/artist/{id}":
    post:
      operationId: FavsController_createFavAtrist
      summary: Add to favorites
      parameters: &a4
        - name: id
          required: true
          in: path
          description: Id
          schema:
            format: uuid
            type: string
      responses: &a5
        "201":
          description: Successful added to favorites
        "400":
          description: Id is not uuid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorType"
        "422":
          description: Entity with this Id doesn`t exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorType"
      tags: *a3
    delete:
      operationId: FavsController_removeFav
      summary: Delete from favorites
      parameters: &a6
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses: &a7
        "204":
          description: Item removed from favorites
        "400":
          description: Id is not uuid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorType"
        "404":
          description: This item is not favorites
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorType"
      tags: *a3
  "/favs/track/{id}":
    post:
      operationId: FavsController_createFavAtrist
      summary: Add to favorites
      parameters: *a4
      responses: *a5
      tags: *a3
    delete:
      operationId: FavsController_removeFav
      summary: Delete from favorites
      parameters: *a6
      responses: *a7
      tags: *a3
  "/favs/album/{id}":
    post:
      operationId: FavsController_createFavAtrist
      summary: Add to favorites
      parameters: *a4
      responses: *a5
      tags: *a3
    delete:
      operationId: FavsController_removeFav
      summary: Delete from favorites
      parameters: *a6
      responses: *a7
      tags: *a3
  /album:
    post:
      operationId: AlbumsController_create
      summary: Create new album
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAlbumDto"
      responses:
        "201":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Album"
        "400":
          description: Request body does not contains required fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorType"
      tags: &a8
        - album
    get:
      operationId: AlbumsController_findAll
      summary: Get all albums
      parameters: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Album"
      tags: *a8
  "/album/{id}":
    get:
      operationId: AlbumsController_findOne
      summary: Get one album with specific Id
      parameters:
        - name: id
          required: true
          in: path
          description: Album identifier
          schema:
            format: uuid
            type: string
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Album"
        "400":
          description: AlbumId is not uuid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorType"
        "404":
          description: Album was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorType"
      tags: *a8
    put:
      operationId: AlbumsController_update
      summary: Update a album with specified Id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAlbumDto"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Album"
        "400":
          description: AlbumId is not uuid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorType"
        "404":
          description: Album was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorType"
      tags: *a8
    delete:
      operationId: AlbumsController_remove
      summary: Delete a album with specific Id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "204":
          description: Album removed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorType"
        "400":
          description: AlbumId is not uuid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorType"
        "404":
          description: Album was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorType"
      tags: *a8
  /track:
    post:
      operationId: TracksController_create
      summary: Create new track
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTrackDto"
      responses:
        "201":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Track"
        "400":
          description: Request body does not contains required fields
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorType"
      tags: &a9
        - track
    get:
      operationId: TracksController_findAll
      summary: Get all tracks
      parameters: []
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Track"
      tags: *a9
  "/track/{id}":
    get:
      operationId: TracksController_findOne
      summary: Get one track with specific Id
      parameters:
        - name: id
          required: true
          in: path
          description: Track identifier
          schema:
            format: uuid
            type: string
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Track"
        "400":
          description: TrackId is not uuid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorType"
        "404":
          description: Track was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorType"
      tags: *a9
    put:
      operationId: TracksController_update
      summary: Update a track with specified Id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTrackDto"
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Track"
        "400":
          description: TrackId is not uuid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorType"
        "404":
          description: Track was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorType"
      tags: *a9
    delete:
      operationId: TracksController_remove
      summary: Delete a track with specific Id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "204":
          description: Track removed
        "400":
          description: TrackId is not uuid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorType"
        "404":
          description: Track was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorType"
      tags: *a9
info:
  title: Home Library Service
  description: Home music library service
  version: 1.0.0
  contact: {}
tags: []
servers: []
components:
  schemas:
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          description: User name
          example: Admin
        password:
          type: string
          description: User Password
          example: adminadmin
      required:
        - login
        - password
    User:
      type: object
      properties:
        id:
          type: string
          description: Album Id
          example: cc75580a-9212-43de-9f3d-36b4c9d5d126
          format: uuid
        login:
          type: string
          description: User name
          example: Admin
        version:
          type: number
          description: increment on update
          example: 1
        createdAt:
          type: number
          description: timestamp of time created
          example: 19000222550
        updatedAt:
          type: number
          description: timestamp of time updated
          example: 19000222550
      required:
        - id
        - login
        - version
        - createdAt
        - updatedAt
    UpdateUserDto:
      type: object
      properties:
        oldPassword:
          type: string
          description: User Password
          example: adminadmin
        newPassword:
          type: string
          description: User Password
          example: newPassword
      required:
        - oldPassword
        - newPassword
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
          description: Artist name
          example: Pol Waker
        grammy:
          type: boolean
          description: Is there a grammy
          example: false
      required:
        - name
        - grammy
    Artist:
      type: object
      properties:
        id:
          type: string
          description: Artist Id
          example: cc75580a-9212-43de-9f3d-36b4c9d5d126
          format: uuid
        name:
          type: string
          description: Artist name
          example: Pol Waker
        grammy:
          type: boolean
          description: Is there a grammy
          example: false
      required:
        - id
        - name
        - grammy
    ErrorType:
      type: object
      properties:
        statusCode:
          type: number
          description: Status code of error
          format: number
        message:
          type: string
          description: Error message
          format: string
        error:
          type: string
          description: Error
          format: string
      required:
        - statusCode
        - message
        - error
    UpdateArtistDto:
      type: object
      properties:
        name:
          type: string
          description: Artist name
          example: Rikki
        grammy:
          type: boolean
          description: Is there a grammy
          example: true
      required:
        - name
        - grammy
    Fav:
      type: object
      properties:
        artists:
          description: All favorit artists by one user
          example:
            - id: cc75580a-9212-43de-9f3d-36b4c9d5d126
              name: Pol Waker
              grammy: false
          type: array
          items:
            type: string
            format: Artist
        albums:
          description: All favorit artists by one user
          example:
            - id: cc75580a-9212-43de-9f3d-36b4c9d5d126
              name: Сold Heart
              year: 1990
              artistId: null
          type: array
          items:
            type: string
            format: Album
        tracks:
          description: All favorit artists by one user
          example:
            - id: cc75580a-9212-43de-9f3d-36b4c9d5d126
              name: Ho-Ho-Ho
              duration: 159
              artistId: null
              albumId: bf75580a-9212-43de-9f3d-36b4c9d5d126
          type: array
          items:
            type: string
            format: Album
      required:
        - artists
        - albums
        - tracks
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
          description: Name of album
          example: Сold Heart
        year:
          type: number
          description: Year of album
          example: 1990
        artistId:
          type: string
          description: Artist Id
          example: null
          format: uuid
      required:
        - name
        - year
        - artistId
    Album:
      type: object
      properties:
        id:
          type: string
          description: Album Id
          example: cc75580a-9212-43de-9f3d-36b4c9d5d126
          format: uuid
        name:
          type: string
          description: Name of album
          example: Сold Heart
        year:
          type: number
          description: year of album
          example: 1990
        artistId:
          type: string
          description: Artist Id
          example: null
          format: uuid
      required:
        - id
        - name
        - year
        - artistId
    UpdateAlbumDto:
      type: object
      properties:
        name:
          type: string
          description: Name of album
          example: Hot Heart
        year:
          type: number
          description: Year of album
          example: 2023
        artistId:
          type: string
          description: Artist Id
          example: null
          format: uuid
      required:
        - name
        - year
        - artistId
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
          description: Name of track
          example: Ho-Ho-Ho
        artistId:
          type: string
          description: Artist Id
          example: null
          format: uuid
        albumId:
          type: string
          description: Album Id
          example: null
          format: uuid
        duration:
          type: number
          description: Duration of track
          example: 180
      required:
        - name
        - artistId
        - albumId
        - duration
    Track:
      type: object
      properties:
        id:
          type: string
          description: Track Id
          example: cc75580a-9212-43de-9f3d-36b4c9d5d126
          format: uuid
        name:
          type: string
          description: Name of track
          example: Ho-Ho-Ho
        artistId:
          type: string
          description: Artist Id
          example: null
          format: uuid
        albumId:
          type: string
          description: Album Id
          example: null
          format: uuid
        duration:
          type: number
          description: Duration of track
          example: 180
      required:
        - id
        - name
        - artistId
        - albumId
        - duration
    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
          description: Name of track
          example: Ha-Ha-Ha
        artistId:
          type: string
          description: Artist Id
          example: null
          format: uuid
        albumId:
          type: string
          description: Album Id
          example: null
          format: uuid
        duration:
          type: number
          description: Duration of track
          example: 180
      required:
        - name
        - artistId
        - albumId
        - duration
